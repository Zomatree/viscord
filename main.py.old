from ui import UIMain
from threading import Thread
#from multiprocessing import Process
from queue import Queue
from curses import wrapper

import discord
import asyncio
import threading
import os
import queue

class Main():
    class SystemFunctions(object):
        def exit(self):
            os._exit(0)

    def __init__(self):
        self.system_functions = self.SystemFunctions()
        self.ui_queue = Queue(maxsize=0)
        self.api_queue = Queue(maxsize=0)

    def start_ui_thread(self):
        ui_main = UIMain(self.ui_queue, self.api_queue)
        self.ui_thread = Thread(target = wrapper, args = (ui_main.setup_ui,))
        self.ui_thread.start()

    def handle_queue_tasks(self):
        try:
            new_task = self.api_queue.get(False)
            obj = getattr(self, new_task[0])
            func = getattr(obj, new_task[1])
            try:
                func(*new_task[2])
            except IndexError:
                func()
        except queue.Empty:
            return

    def start_queue_loop(self):
        while True:
            self.handle_queue_tasks()

class ViscordClient(discord.Client):
    def __init__(self, ui_queue, api_queue):
        super().__init__()
        self.ui_queue, self.api_queue = ui_queue, api_queue
        task = ("top_bar", "change_text", ("The Discord API is loading, please wait!", ))
        self.ui_queue.put(task)
    
    async def on_ready(self):
        self.api_queue.put(0)
        task = ("top_bar", "change_text", ("The Discord API is loaded, have fun!", ))
        self.ui_queue.put(task)

async def start_user(client, token, ui_queue):
    try:
        await client.start(token, bot=False)
    except discord.errors.LoginFailure:
        task = ("top_bar", "change_text", ("Failed to log into Discord.", ))
        ui_queue.put(task)

def start_user_thread(client, token, ui_queue):
    loop = asyncio.get_event_loop()
    loop.create_task(start_user(client, token, ui_queue))

    thread = Thread(target=loop.run_forever)
    thread.start()

main = Main()
viscord_client = ViscordClient(main.ui_queue, main.api_queue)
try:
    token = os.environ["VISCORD_TOKEN"]
except:
    print("You need to set VISCORD_TOKEN environment variable to your discord token!")
main.start_ui_thread()
start_user_thread(viscord_client, token, main.ui_queue)
main.api_queue.get()
main.api_queue.task_done()
main.start_queue_loop()
